# The 'utl' (Util) jsonnet library contains utility functions that are used by most
# libraries here, and/or don't fit in any other specialized library.


local makeObjectDrop5(keys,values,offset) =
	local v0 = values[offset];
	local v1 = values[offset+1];
	local v2 = values[offset+2];
	local v3 = values[offset+3];
	local v4 = values[offset+4];
	{ [if v0 != null then keys[offset]]: v0, [if v1 != null then keys[offset+1]]: v1,
	  [if v2 != null then keys[offset+2]]: v2, [if v3 != null then keys[offset+3]]: v3,
	  [if v4 != null then keys[offset+4]]: v4, };

local makeObjectDropX(keys,values,offset) =
	local size = std.length(keys) - offset;
	if size == 0 then
		{}
	else
		local v0 = values[offset];
		if size == 1 then
			{ [if v0 != null then keys[offset]]: v0, }
		else
			local v1 = values[offset+1];
			if size == 2 then
				{ [if v0 != null then keys[offset]]: v0, [if v1 != null then keys[offset+1]]: v1, }
			else
				local v2 = values[offset+2];
				if size == 3 then
					{ [if v0 != null then keys[offset]]: v0, [if v1 != null then keys[offset+1]]: v1,
					  [if v2 != null then keys[offset+2]]: v2, }
				else
					if size == 4 then
						local v3 = values[offset+3];
						{ [if v0 != null then keys[offset]]: v0, [if v1 != null then keys[offset+1]]: v1,
						  [if v2 != null then keys[offset+2]]: v2, [if v3 != null then keys[offset+3]]: v3, }
					else if size == 5 then
						makeObjectDrop5(keys,values,offset)
					else
						makeObjectDrop5(keys,values,offset) + makeObjectDropX(keys,values,offset+5);

local makeObjectKeep5(keys,values,offset) =
	{ [keys[offset]]: values[offset], [keys[offset+1]]: values[offset+1], [keys[offset+2]]: values[offset+2],
	  [keys[offset+3]]: values[offset+3], [keys[offset+4]]: values[offset+4], };

local makeObjectKeepX(keys,values,offset) =
	local size = std.length(keys) - offset;
	if size == 0 then
		{}
	else if size == 1 then
		{ [keys[offset]]: values[offset] }
	else if size == 2 then
		{ [keys[offset]]: values[offset], [keys[offset+1]]: values[offset+1], }
	else if size == 3 then
		{ [keys[offset]]: values[offset], [keys[offset+1]]: values[offset+1],
		  [keys[offset+2]]: values[offset+2], }
	else if size == 4 then
		{ [keys[offset]]: values[offset], [keys[offset+1]]: values[offset+1],
		  [keys[offset+2]]: values[offset+2], [keys[offset+3]]: values[offset+3], }
	else if size == 5 then
		makeObjectKeep5(keys,values,offset)
	else
		makeObjectKeep5(keys,values,offset) + makeObjectKeepX(keys,values,offset+5);

# Calls "work" up to 10 times before returning.
local doWhile0(cond,work,init) =
	if cond(init) then
		local w0 = work(init);
		if cond(w0) then
			local w1 = work(w0);
			if cond(w1) then
				local w2 = work(w1);
				if cond(w2) then
					local w3 = work(w2);
					if cond(w3) then
						local w4 = work(w3);
						if cond(w4) then
							local w5 = work(w4);
							if cond(w5) then
								local w6 = work(w5);
								if cond(w6) then
									local w7 = work(w6);
									if cond(w7) then
										local w8 = work(w7);
										if cond(w8) then
											[true,work(w8)]
										else
											[false,w8]
									else
										[false,w7]
								else
									[false,w6]
							else
								[false,w5]
						else
							[false,w4]
					else
						[false,w3]
				else
					[false,w2]
			else
				[false,w1]
		else
			[false,w0]
	else
		[false,init];

# Calls "dw" up to 10 times before returning.
local doWhileX(cond,work,init,dw) =
	local w0 = dw(cond,work,init);
	if w0[0] then
		local w1 = dw(cond,work,w0[1]);
		if w1[0] then
			local w2 = dw(cond,work,w1[1]);
			if w2[0] then
				local w3 = dw(cond,work,w2[1]);
				if w3[0] then
					local w4 = dw(cond,work,w3[1]);
					if w4[0] then
						local w5 = dw(cond,work,w4[1]);
						if w5[0] then
							local w6 = dw(cond,work,w5[1]);
							if w6[0] then
								local w7 = dw(cond,work,w6[1]);
								if w7[0] then
									local w8 = dw(cond,work,w7[1]);
									if w8[0] then
										dw(cond,work,w8[1])
									else
										w8
								else
									w7
							else
								w6
						else
							w5
					else
						w4
				else
					w3
			else
				w2
		else
			w1
	else
		w0;

# Calls "doWhile0" up to 10 times before returning.
local doWhile1(cond,work,init) =
	doWhileX(cond,work,init,doWhile0);

# Calls "doWhile1" up to 10 times before returning.
local doWhile2(cond,work,init) =
	doWhileX(cond,work,init,doWhile1);

# Calls "doWhile2" up to 10 times before returning.
local doWhile3(cond,work,init) =
	doWhileX(cond,work,init,doWhile2);

{
	local utl = self,
	
	# Library description
	DESCIPTION:: "The 'utl' (Util) jsonnet library contains utility functions that are used by most "
		+"libraries here,\nand/or don't fit in any other specialized library.",
	
	# All the imported libraries
	IMPORTS:: {},
	
	# Returns true for an "empty" value (null | '' | {} | []). Does NOT return true for 'false' / '0'
	empty(value)::
		(value == null || value == '' || value == {} || value == []),
	
	# Returns true for an "false" value (null | '' | {} | [] | false | 0)
	no(value)::
		(value == null || value == '' || value == {} || value == [] || value == false || value == 0),
	
	# Returns true for an "true" value: NOT (null | '' | {} | [] | false | 0)
	yes(value)::
		!utl.no(value),

	# "Applies" the parameters to the function, calling it and returning the result.
	# Will FAIL if "func" is not a function, "params" is not an array, or std.length(params) > 9.
	apply(func,params)::
		assert std.assertEqual(std.type(func), "function") &&
			std.assertEqual(std.type(params), "array");
		local p = params;
		local n = std.length(p);
		if n == 0 then
			func()
		else if n == 1 then
			func(p[0])
		else if n == 2 then
			func(p[0],p[1])
		else if n == 3 then
			func(p[0],p[1],p[2])
		else if n == 4 then
			func(p[0],p[1],p[2],p[3])
		else if n == 5 then
			func(p[0],p[1],p[2],p[3],p[4])
		else if n == 6 then
			func(p[0],p[1],p[2],p[3],p[4],p[5])
		else if n == 7 then
			func(p[0],p[1],p[2],p[3],p[4],p[5],p[6])
		else if n == 8 then
			func(p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7])
		else if n == 9 then
			func(p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7],p[8])
		else
			error "Too many parameters: "+std.toString(n),

	# Returns true if the function "func" return true for any element in the array "arr"
	matchAny(func,arr)::
		(std.length(std.filter(func, arr)) > 0),

	# Converts an object to an array. The field names must be unsigned integers.
	# Missing fields will be set to "default", which defaults to null.
	object2Array(obj,default=null)::
		if obj == null then
			null
		else
			assert std.assertEqual(std.type(obj), 'object');
			local fields = std.objectFields(obj);
			if std.length(fields) == 0 then
				[]
			else
				local idx = std.map(std.parseInt, fields);
				local max = std.foldl(std.max, idx, -1);
				local get(i) = std.get(obj,std.toString(i),default);
				std.makeArray(max+1, get),

	# Takes two arrays, keys and values, which must have the same length, and use them to build an object.
	# Keys must be strings.
	makeObject(keys,values,keepNullValues=true)::
		assert std.assertEqual(std.type(keys), 'array')
			&& std.assertEqual(std.type(values), 'array')
			&& std.assertEqual(std.type(keepNullValues), 'boolean');
		local nKeys = std.length(keys);
		local nValues = std.length(values);
		assert std.assertEqual(nKeys, nValues);
		if keepNullValues then
			makeObjectKeepX(keys,values,0)
		else
			makeObjectDropX(keys,values,0),
	
	# Add all elements of arr
	sum(arr, init)::
		std.foldr(function(a,b) a + b, arr, init),
	
	# Extend the lenght of a string to the desired length.
	# If str is too small, character in fill is used to extend it,
	# and is added either before str if inFront is true, or behind.
	extendStr(str,newLen,fill,inFront)::
		assert std.length(fill) == 1;
		local strLen = std.length(str);
		if strLen < newLen then
			local ext = std.repeat(fill, newLen - strLen);
			if inFront then ext + str else str + ext
		else
			str,
	
	# Simulates a "while loop". While loops should be implemented using recursion, but because there
	# is not tail-call-optimisation, longer/deeper while loops fail with stack overflow.
	# This function tries to work around the limit by reducing, but not eliminiting, recursion.
	# "cond" is a function that takes "init", or the result of "work", and returns true if we should
	# call work again. "work" is a function that takes "init", or it's own last output, and produce
	# a new output. "init" is the initial input to "cond" and "work". Either returns the last output
	# of "work", or "init", if "cond(init)" returneed false.
	while(cond,work,init)::
		local w = doWhile3(cond,work,init);
		if w[0] then
			utl.while(cond,work,w[1])
		else
			w[1],

	# All functions in the library, with their parameter names
	FUNCS:: {
		empty: ['value'],
		no: ['value'],
		yes: ['value'],
		apply: ['func', 'params'],
		matchAny: ['func', 'arr'],
		sum: ['arr', 'init'],
		object2Array: ['obj', 'default?'],
		makeObject: ['keys', 'values','keepNullValues?'],
		extendStr: ['str','newLen','fill','inFront'],
		while: ['cond','work','init'],
	},
}
