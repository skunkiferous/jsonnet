/*
Copyright 2023 Sebastien Diot. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

# jsonnet library "int" helps (a bit) dealing with integers, that are outside the range that can
# correctly be represented as a "number" (64bit double). For completness, it also included a
# isNumberStr(), safeParseNumber(), isBooleanStr() und safeParseBoolean() functions.

local log = import 'log.libjsonnet';
local utl = import 'utl.libjsonnet';

# field name separator (i.e. "a.b")
local SEP = ".";

# Valid number characters
local INT_CHARS = "0123456789";
local HEX_CHARS = "0123456789abcdefABCDEF";

# Character CODE of 0
local ZERO = std.codepoint('0');

# Character CODE of A, minus 10
local A_10 = std.codepoint('A') - 10;

# Compares two integers that have the same, non-zero sign, and are strings.
local cmpStr(a,b,negative) =
	if a == b then
		0
	else
		local aLen = std.length(a);
		local bLen = std.length(b);
		local a2 = if negative then std.substr(a, 1, aLen-1)  else a;
		local b2 = if negative then std.substr(b, 1, bLen-1) else b;
		local aLen2 = if negative then aLen-1  else aLen;
		local bLen2 = if negative then bLen-1 else bLen;
		local maxLen = std.max(aLen2, bLen2);
		local a3 = utl.extendStr(a2,maxLen,'0',true);
		local b3 = utl.extendStr(b2,maxLen,'0',true);
		local unsignedCmp = if a3 < b3 then -1 else 1;
		# Inverse result if negative is true!
		if negative then -unsignedCmp else unsignedCmp;

# Compares two integers that have the same, non-zero sign.
local cmpSameSign(a,b,negative) =
	local aType = std.type(a);
	local bType = std.type(b);
	if aType == bType then
		if aType == 'number' then
			if a == b then 0 else if a < b then -1 else 1
		else
			cmpStr(a,b,negative)
	else
		local aStr = if aType == 'string' then a else std.toString(a);
		local bStr = if bType == 'string' then b else std.toString(b);
		cmpStr(aStr,bStr,negative);

# Skips unneeded zeros (cause error in std.parseJson(num)! )
local skipZerosOfNumberStr(str) =
	local cleaned = if std.startsWith(str, '-') then
		(if std.startsWith(str, '-0') then
			'-'+std.lstripChars(std.substr(str, 1, std.length(str)-1), '0')
		else str)
	else
		std.lstripChars(str, '0');
	if (cleaned == '-' || cleaned == '') then
		'0'
	else if std.startsWith(cleaned, '-.') then
		'-0'+std.substr(cleaned, 1, std.length(cleaned)-1)
	else if std.startsWith(cleaned, '.') then
		'0'+cleaned
	else
		cleaned;

# Parse a string into a number, stripping unneeded zeros (cause error in std.parseJson(num)! )
local pasreNumber(str) =
	local maybeNum = std.parseJson(skipZerosOfNumberStr(str));
	assert std.type(maybeNum) == 'number';
	maybeNum;

# Takes two unsigned integers as strings, and adds b to a.
local addUIntStr(a,b) =
    # Find length of both input and maximum
    local al = std.length(a);
    local bl = std.length(b);
    local ml = std.max(al, bl);
    # Pad both input to maximum
    local pa = std.repeat('0', ml-al)+a;
    local pb = std.repeat('0', ml-bl)+b;
    # Break into character arrays
    local ach = std.encodeUTF8(pa);
    local bch = std.encodeUTF8(pb);
    # We iterate backward over all indexes
    local loop = std.reverse(std.range(0,ml-1));
    # Add one pair of digits, and combine with carry and result do far.
    local addOne(carry_result,idx) =
        local carry = carry_result[0];
        local lastResult = carry_result[1];
        # Compute "numerical" digit of a
        local ad = ach[idx] - ZERO;
        # Compute "numerical" digit of b
        local bd = bch[idx] - ZERO;
        # Add
        local r = ad + bd + carry;
        # Compute carry and new result
        if r >= 10 then
            [1,[(r%10) + ZERO]+lastResult]
        else
            [0,[r + ZERO]+lastResult];
    # Join all digits
    skipZerosOfNumberStr(std.decodeUTF8(std.foldl(addOne, loop, [0,[]])[1]));

# Takes two unsigned integers as strings, and substract smaller from greater.
local subUIntStr(greater,smaller) =
	local a = greater;
	local b = smaller;
    # Find length of both input and maximum
    local al = std.length(a);
    local bl = std.length(b);
    local ml = std.max(al, bl);
    # Pad both input to maximum
    local pa = std.repeat('0', ml-al)+a;
    local pb = std.repeat('0', ml-bl)+b;
    # Break into character arrays
    local ach = std.encodeUTF8(pa);
    local bch = std.encodeUTF8(pb);
    # We iterate over all indexes
    local loop = std.range(1,ml);
    # Add one pair of digits, and combine with carry and result do far.
    local subOne(carry_result,idx) =
        local carry = carry_result[0];
        local lastResult = carry_result[1];
		local idx2 = ml - idx;
        # Compute "numreical" digit of a
        local ad = ach[idx2] - ZERO;
        # Compute "numerical" digit of b
        local bd = bch[idx2] - ZERO;
        # Sub
        local r = ad - bd - carry;
        # Compute carry and new result
        if r < 0 then
            [1,[r + 10 + ZERO]+lastResult]
        else
            [0,[r + ZERO]+lastResult];
    # Join all digits
    skipZerosOfNumberStr(std.decodeUTF8(std.foldl(subOne, loop, [0,[]])[1]));

# Compute "numerical" digits
local ch2d(ch) =
	ch - ZERO;

# Compute "charcter" digits
local d2ch(d) =
	d + ZERO;

# Takes two unsigned integers as strings, and multiplies a by b.
local multUIntStr(a,b) =
    # Find length of both input and maximum
    local al = std.length(a)+1;
    local bl = std.length(b)+1;
    local ml = std.max(al, bl);
    # Pad both input to maximum
    # Break into character arrays
    # Compute "numerical" digits
    local ad = std.map(ch2d, std.reverse(std.encodeUTF8('0'+a)));
    local bd = std.map(ch2d, std.reverse(std.encodeUTF8('0'+b)));
	# Starter value for "carry" array
	#local resLen = std.trace("multUIntStr"+std.toString([a,b])+std.toString({ad:ad,bd:bd}), al+bl);
	local resLen = al+bl;
	local cZero = std.repeat([0], resLen);
	# Indexes for inner loop
	local innerIdx = std.range(0,al-1);
	# Inner loop
	local innerLoop(cd,i) =
		# Content of inner loop
		local inner(tmp,j) =
			local carry = tmp[0];
			local newC = tmp[1];
			local t =  (ad[j] * bd[i]) + cd[i+j] + carry;
			local newCarry = std.floor(t/10);
			local newcIJ = t % 10;
			[newCarry, newC+[newcIJ]];
		local newCPart = std.foldl(inner, innerIdx, [0,[]])[1];
		local cBefore = cd[0:i];
		local cAfter = cd[(std.length(cBefore)+std.length(newCPart)):resLen];
		local result = cBefore + newCPart + cAfter;
		result;
		#std.trace("innerLoop(cd,i):"+std.toString({
		#	cAfter: cAfter, newCPart: newCPart, cBefore: cBefore, cd: cd, i: i, ml: ml, al: al,
		#	bl: bl, resLen: resLen, "len(cBefore)":std.length(cBefore), result: result,
		#	"len(newCPart)":std.length(newCPart),"len(cAfter)":std.length(cAfter)
		#}), result);
	local digits = std.foldl(innerLoop, std.range(0,bl-1), cZero);
	# Compute "charcter" digits
	local digitsCh = std.reverse(std.map(d2ch, digits));
    # Join all digits
    skipZerosOfNumberStr(std.decodeUTF8(digitsCh));

{
	local int = self,
	
	# Library description
	DESCIPTION:: "jsonnet library 'int' helps (a bit) dealing with integers, that are outside the "
		+"range that can correctly be represented\nas a 'number' (64bit double). For completness, it "
		+"also included a isNumberStr(), safeParseNumber(), isBooleanStr() und safeParseBoolean() "
		+"functions.",
	
	# All the imported libraries
	IMPORTS:: { log: log, utl: utl },

	# Integer limit in JSON number
	MIN_SAFE_INTEGER:: -9007199254740991,
	MAX_SAFE_INTEGER:: 9007199254740991,

	# Integer limits. They are ouside of "safe" limits, so must be strings.
	MIN_SIGNED_INT64::   "-9223372036854775808",
	MAX_SIGNED_INT64::    "9223372036854775807",
	MAX_UNSIGNED_INT64:: "18446744073709551615",

	# If num is a string, converts it to a number, at the risk of loosing precising.
	# WARNING: This function assume the str is a valid number. It will FAIL if not.
	# Use safeParseNumber() or safeParseInteger() to parse raw user input.
	toNumber(num)::
		if std.type(num) == 'number' then
			num
		else
			pasreNumber(num),

	# Returns true, if "str" is a boolean
	isBooleanStr(str)::
		(str == "true" || str == "false"),

	# Returns true, if "str" is an unsigned integer (even huge integers, that cannot be represented
	# correctly as a JSON number).
	isUIntegerStr(str)::
		(std.type(str) == "string") && (std.length(str) > 0) &&
			(std.length(std.stripChars(str, INT_CHARS)) == 0),

	# Returns true, if "str" is an integer (even huge integers, that cannot be represented correctly
	# as a JSON number).
	isIntegerStr(str)::
		if std.type(str) == "string" then
			if std.startsWith(str,'-') then
				int.isUIntegerStr(std.substr(str, 1, std.length(str)-1))
			else
				int.isUIntegerStr(str)
		else
			false,

	# Returns true if num (string or number) is an integer.
	isInteger(num)::
		if std.type(num) == "number" then (std.round(num) == num) else int.isIntegerStr(num),

	# Returns true, if "str" is a number
	isNumberStr(str)::
		if std.type(str) != "string" then
			false
		else
			local len = std.length(str);
			if len == 0 then
				false
			else
				local dots = std.findSubstr(SEP, str);
				local nDots = std.length(dots);
				if nDots == 0 then
					int.isIntegerStr(str)
				else if nDots == 1 then
					local lp = dots[0];
					local prefix = std.substr(str, 0, lp);
					# "+1" to skip separator too
					local rest = std.substr(str, lp+1, len-lp);
					int.isIntegerStr(prefix) && int.isUIntegerStr(rest)
				else
					false,

	# *Safely* parse a boolean value. Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value.
	safeParseBoolean(source, index, field, str)::
		if int.isBooleanStr(str) then
			{ result: (str == "true"), errors: [] }
		else
			{ result: null, errors: [  log.badVal(source, index, field, 'boolean', str) ] },

	# Returns true, if "str" is an hexadecimal integer
	isHexStr(str)::
		if std.type(str) == "string" then
			local len = std.length(str);
			(len > 2) && (std.startsWith(str, "0x") || std.startsWith(str, "0X")) &&
				(std.length(std.stripChars(std.substr(str, 2, len-2), HEX_CHARS)) == 0)
		else
			false,

	# Returns true, if this integer is within the range that can be correctly represented as a JSON
	# number
	isNotHugeInt(num)::
		(std.type(num) == "number") && int.isIntegerStr(std.toString(num)) &&
			(num >= int.MIN_SAFE_INTEGER) && (num <= int.MAX_SAFE_INTEGER),

	# Convert an integer back to a number if possible
	local intToNumberSafe(num) =
		if std.type(num) == 'number' then
			num
		else
			local cleaned = skipZerosOfNumberStr(num);
			local num2 = std.parseJson(cleaned);
			assert std.type(num2) == 'number';
			if (num2 >= int.MIN_SAFE_INTEGER) && (num2 <= int.MAX_SAFE_INTEGER) then num2 else cleaned,

	# *Safely* parse a integer value. Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value.
	# "str" is potentially too "big" to be correctly represented with a "number".
	# In this case, it will remain a string, and a warning will be given in "errors".
	safeParseInteger(source, index, field, str)::
		if int.isIntegerStr(str) then
			# pasreNumber(str) will return a simple number value, if str is really a number
			local num = pasreNumber(str);
			if int.isNotHugeInt(num) then
				{ result: num, errors: [] }
			else
				local cleaned = if std.startsWith(str, '-')	then
					(if std.startsWith(str, '-0') then
						'-'+std.lstripChars(std.substr(str, 1, std.length(str)-1), '0')
					else str)
				else
					std.lstripChars(str, '0');
				{ result: cleaned, errors: [ log.warnVal(source, index, field, 'integer', str,
					'cannot be safely represented as a number.') ] }
		else
			{ result: null, errors: [ log.badVal(source, index, field, 'integer', str) ] },

	# *Safely* parse a HEX integer value. Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value or too big.
	# VALUE above might be either a number or a decimal string, depending on how big str is.
	safeParseHex(source, index, field, str)::
		if int.isHexStr(str) then
			local noPrefix = skipZerosOfNumberStr(std.substr(str, 2, std.length(str)-2));
			local num = std.parseHex(noPrefix);
			# hex num will never be < 0!
			if num <= int.MAX_SAFE_INTEGER then
				{ result: num, errors: [] }
			else
				# Hex value needs 53+ bits; break in half.
				local noPrefLen = std.length(noPrefix);
				local restLen = noPrefLen - 8;
				local low = std.substr(noPrefix, restLen, 8);
				local high = std.substr(noPrefix, 0, restLen);
				local lowNum = std.parseHex(low);
				local highNum = std.parseHex(high);
				if highNum <= int.MAX_SAFE_INTEGER then
					local num2 = int.add(lowNum, int.mult(highNum,"4294967296"));
					{ result: num2, errors: [] }
				else
					# Hex value well beyond 64-bit unsigned int
					{ result: null, errors: [ log.badVal(source, index, field, 'hex', str) ] }
		else
			{ result: null, errors: [ log.badVal(source, index, field, 'hex', str) ] },
	
	local num2hex(num) =
		if num == 0 then
			"0"
		else
			local again(num_hex) = num_hex[0] > 0;
			local toHex(num_hex) =
				local rest = std.floor(num_hex[0]/16);
				local n = std.mod(num_hex[0],16);
				local h = std.char(if (n < 10) then (n + ZERO) else (n + A_10));
				[rest, h+num_hex[1]];
			utl.while(again,toHex,[num,''])[1],
	
	local toHexStr2(intnum) =
		local dm = int.divmod(intnum, 4294967296); # 2 ** 32 = 8 hex digits
		local high = dm[0];
		local low = dm[1];
		local highHex = num2hex(high);
		local lowHex = num2hex(low);
		local zeros = std.repeat('0', 8-std.length(lowHex));
		{ result: '0x'+highHex+zeros+lowHex, errors: [] },
	
	local toHexStr3(intnum) =
		local dm = int.divmod(intnum, 281474976710656); # 2 ** 48 = 12 hex digits
		local high = dm[0];
		local low = dm[1];
		local highHex = num2hex(high);
		local lowHex = num2hex(low);
		local zeros = std.repeat('0', 12-std.length(lowHex));
		{ result: '0x'+highHex+zeros+lowHex, errors: [] },

	# Converts an integer to an hex string.  Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if intnum is not a valid value or too big.
	toHexStr(source, index, field, intnum)::
		utl.force(if int.isUInt64(intnum) then
			if std.type(intnum) == 'number' then
				{ result: '0x'+num2hex(intnum), errors: [] }
			else
				local num = pasreNumber(intnum);
				if num <= int.MAX_SAFE_INTEGER then
					# Small enough
					{ result: '0x'+num2hex(num), errors: [] }
				else
					toHexStr2(intnum)
		else if int.isUIntegerStr(intnum) && int.lt(intnum, "79228162514264337593543950336") then
			toHexStr3(intnum)
		else if int.isInt64(intnum) then
			# Must be negative ...
			local twosCompl = int.add(intnum, "18446744073709551616");
			int.toHexStr(source, index, field, twosCompl)
		else
			# Not even int
			{ result: null, errors: [ log.badVal(source, index, field, 'int', intnum) ] }),

	# *Safely* parse a decimal number value (i.e. '123.456'). Returns an object like { result: VALUE,
	# errors: [] }. "result" is null and errors contains error message(s) if str is not a valid value.
	safeParseNumber(source, index, field, str)::
		if int.isNumberStr(str) then
			# pasreNumber(str) will return a simple number value, if str is really a number
			{ result: pasreNumber(str), errors: [] }
		else
			{ result: null, errors: [ log.badVal(source, index, field, 'number', str) ] },
	
	# Returns -1, 0 or 1 based on the sign of the integer.
	sign(num)::
		# Assume num is an integer as string, if not a number ...
		std.sign(int.toNumber(num)),
	
	# Returns an array with the sign and the unsigned number.
	splitSign(num)::
		# Assume num is an integer as string, if not a number ...
		local isNum = std.type(num) == "number";
		local num2 = if isNum then num else pasreNumber(num);
		local sign = std.sign(num2);
		if sign >= 0 then
			if isNum then [sign, num] else [sign, skipZerosOfNumberStr(num)]
		else if isNum then
			[sign, -num]
		else
			local cleaned = skipZerosOfNumberStr(num);
			[sign, std.substr(cleaned, 1, std.length(cleaned)-1)],

	# Compares the integers a and b. Returns 0 if equals, 1 is a > b else -1
	cmp(a,b)::
		local aSign = int.sign(a);
		local bSign = int.sign(b);
		if aSign == 0 then
			if bSign == 0 then
				0
			else if bSign > 0 then
				-1
			else
				1
		else if aSign != bSign then
			if aSign > 0 then 1 else -1
		else
			# a and b have same sign, and are not 0, so we need "real" comparision
			cmpSameSign(a,b,aSign < 0),

	# Compares the integers a and b. Returns true if a < b.
	lt(a,b)::
		int.cmp(a,b) < 0,

	# Compares the integers a and b. Returns true if a <= b.
	le(a,b)::
		int.cmp(a,b) <= 0,

	# Compares the integers a and b. Returns true if a > b.
	gt(a,b)::
		int.cmp(a,b) > 0,

	# Compares the integers a and b. Returns true if a >= b.
	ge(a,b)::
		int.cmp(a,b) >= 0,

	# Compares the integers a and b. Returns true if a == b.
	eq(a,b)::
		int.cmp(a,b) == 0,

	# Compares the integers a and b. Returns true if a != b.
	ne(a,b)::
		int.cmp(a,b) != 0,

	# Compares the integers a and b. Returns the smallest one.
	min(a,b)::
		if int.cmp(a,b) < 0 then a else b,

	# Compares the integers a and b. Returns the biggest one.
	max(a,b)::
		if int.cmp(a,b) > 0 then a else b,

	# Returns true if the number is within the valid (signed) int64 range.
	isInt64(num)::
		int.isInteger(num) && int.le(int.MIN_SIGNED_INT64, num) && int.le(num, int.MAX_SIGNED_INT64),

	# Returns true if the number is within the valid unsigned int64 range.
	isUInt64(num)::
		int.isInteger(num) && int.le(0, num) && int.le(num, int.MAX_UNSIGNED_INT64),

	# Negates number, even if they are big integers strings.
	neg(num)::
		if std.type(num) == 'number' then
			-num
		else
			local arr = int.splitSign(num);
			local sign = arr[0];
			local uns = arr[1];
			if sign == 0 then
				# 0 stays 0 when negated
				'0'
			else if sign > 0 then
				'-'+uns
			else
				uns,

	# Returns the "absolute" value of a number, even if they are big integers strings.
	abs(num)::
		if std.type(num) == 'number' then
			std.abs(num)
		else
			int.splitSign(num)[1],

	local toNumberStr(num) =
		if std.type(num) == 'string' then
			num
		else
			std.toString(num),

	# Takes two unsigned integers, and adds b to a.
	local doAdd(a,b) =
		local an = int.toNumber(a);
		local bn = int.toNumber(b);
		local ab = an + bn;
		if int.isNotHugeInt(ab) then
			ab
		else
			addUIntStr(toNumberStr(a),toNumberStr(b)),

	# Takes two unsigned integers, and substract b from a.
	local doSub(a,b) =
		local an = int.toNumber(a);
		local bn = int.toNumber(b);
		local ab = an - bn;
		if int.isNotHugeInt(a) && int.isNotHugeInt(b) && int.isNotHugeInt(ab) then
			ab
		else
			local as = toNumberStr(a);
			local bs = toNumberStr(b);
			if int.ge(a, b) then
				subUIntStr(as,bs)
			else
				int.neg(subUIntStr(bs,as)),

	# Takes two integers, and adds b to a.
	local add2(a,b) =
		local aTmp = int.splitSign(a);
		local aSign = aTmp[0];
		local aUns = aTmp[1];
		local bTmp = int.splitSign(b);
		local bSign = bTmp[0];
		local bUns = bTmp[1];
		if aSign == 0 then
			b
		else if bSign == 0 then
			a
		else if aSign == bSign then
			if aSign == 1 then doAdd(a,b) else int.neg(doAdd(aUns,bUns))
		else
			# Signs are different, so it's actually a substraction
			if aSign == 1 then doSub(a,bUns) else doSub(b,aUns),

	# Takes two integers, and adds b to a.
	add(a,b)::
		intToNumberSafe(add2(a,b)),

	# Takes two integers, and substract b from a.
	local sub2(a,b) =
		local aTmp = int.splitSign(a);
		local aSign = aTmp[0];
		local aUns = aTmp[1];
		local bTmp = int.splitSign(b);
		local bSign = bTmp[0];
		local bUns = bTmp[1];
		if aSign == 0 then
			int.neg(b)
		else if bSign == 0 then
			a
		else if aSign == bSign then
			if aSign == 1 then doSub(a,b) else doSub(bUns,aUns)
		else
			# Signs are different, so it's actually an addition
			if aSign == 1 then doAdd(a,bUns) else int.neg(doAdd(aUns,b)),

	# Takes two integers, and substract b from a.
	sub(a,b)::
		intToNumberSafe(sub2(a,b)),

	# Divide integer by 10
	local div10(n) =
		if std.type(n) == 'string' then std.substr(n, 0, std.length(n)-1) else std.floor(n / 10),

	# Multiplies integer by 10
	local mult10(n) =
		if std.type(n) == 'string' then
			n+'0'
		else
			local result = n * 10;
			if int.isNotHugeInt(result) then
				result
			else
				std.toString(n)+'0',

	# Takes two integers, and multiplies a and b.
	local doMult(a,b) =
		local an = int.toNumber(a);
		local bn = int.toNumber(b);
		local ab = an * bn;
		if int.isNotHugeInt(ab) then
			ab
		else if an == 1 then
			b
		else if bn == 1 then
			a
		else
			local as = toNumberStr(a);
			local bs = toNumberStr(b);
			if std.stripChars(as, '0') == '1' then
				# Speical case for 100... * b (optimized for euclide)
				assert std.startsWith(as, '1');
				bs + std.substr(as, 1, std.length(as)-1)
			else
				if std.stripChars(bs, '0') == '1' then
					# Speical case for a * 100... (optimized for euclide)
					assert std.startsWith(bs, '1');
					as + std.substr(bs, 1, std.length(bs)-1)
				else
					multUIntStr(as,bs),

	# Takes two integers, and multiplies a and b.
	local mult2(a,b) =
		local aTmp = int.splitSign(a);
		local aSign = aTmp[0];
		local aUns = aTmp[1];
		local bTmp = int.splitSign(b);
		local bSign = bTmp[0];
		local bUns = bTmp[1];
		if (aSign == 0) || (bSign == 0) then
			0
		else if aSign == bSign then
			# + * + == +, - * - == +
			doMult(aUns,bUns)
		else
			# + * - == - * + == -
			int.neg(doMult(aUns,bUns)),

	# Takes two integers, and multiplies a and b.
	mult(a,b)::
		intToNumberSafe(mult2(a,b)),

	# Takes two positive integers strings, divides a by b, and returns [quotient, remainder].
	local euclide(a,b) =
		# We need division to implement division! But x/10 can be implemented without / ...
		local newN2(ax,n) =
			if int.gt(int.mult(b, n), ax) then
				n
			else
				newN2(ax,mult10(n));
		local newN(ax,n) = utl.force(div10(newN2(ax,n)));
		local newQR2(bn,nx,qx,rx) =
			if int.lt(rx, bn) then
				[qx,rx]
			else
				newQR2(bn,nx,int.add(qx,nx),int.sub(rx,bn));
		local newQR(nx,qx,rx) = utl.force(newQR2(int.mult(b, nx),nx,qx,rx));
		local loop(ax,nx,qx,rx) =
			if int.lt(rx, b) then
				[qx,rx]
			else
				local qxrx = newQR(newN(ax,nx),qx,rx);
				utl.force(loop(qxrx[1],1,qxrx[0],qxrx[1]));
		loop(a,1,0,a),

	# Takes two positive integers, divides a by b, and returns [quotient, remainder].
	local doDivmod(a,b) =
		local an = int.toNumber(a);
		local bn = int.toNumber(b);
		if int.isNotHugeInt(a) && int.isNotHugeInt(b) then
			[std.floor(an / bn), an % bn]
		else if bn == 1 then
			[a, 0]
		else
			local e = euclide(toNumberStr(a),toNumberStr(b));
			[intToNumberSafe(e[0]),intToNumberSafe(e[1])],

	# Takes two integers, divides a by b, and returns [quotient, remainder], or null if b is 0 (NaN)
	divmod(a,b)::
		local bTmp = int.splitSign(b);
		local bSign = bTmp[0];
		if bSign == 0 then
			# NaN
			null
		else
			local aTmp = int.splitSign(a);
			local aSign = aTmp[0];
			if aSign == 0 then
				[0,0]
			else
				local aUns = aTmp[1];
				local bUns = bTmp[1];
				local unsRes = doDivmod(aUns,bUns);
				if aSign == bSign then
					# + / + == +, - / - == +
					unsRes
				else
					# + / - == - / + == -
					[int.neg(unsRes[0]),unsRes[1]],
	
	# The powers of 2, up to 64
	TWO_POWER_N:: [
		1, # 2**0
		2, # 2**1
		4, # 2**2
		8, # 2**3
		16, # 2**4
		32, # 2**5
		64, # 2**6
		128, # 2**7
		256, # 2**8
		512, # 2**9
		1024, # 2**10
		2048, # 2**11
		4096, # 2**12
		8192, # 2**13
		16384, # 2**14
		32768, # 2**15
		65536, # 2**16
		131072, # 2**17
		262144, # 2**18
		524288, # 2**19
		1048576, # 2**20
		2097152, # 2**21
		4194304, # 2**22
		8388608, # 2**23
		16777216, # 2**24
		33554432, # 2**25
		67108864, # 2**26
		134217728, # 2**27
		268435456, # 2**28
		536870912, # 2**29
		1073741824, # 2**30
		2147483648, # 2**31
		4294967296, # 2**32
		8589934592, # 2**33
		17179869184, # 2**34
		34359738368, # 2**35
		68719476736, # 2**36
		137438953472, # 2**37
		274877906944, # 2**38
		549755813888, # 2**39
		1099511627776, # 2**40
		2199023255552, # 2**41
		4398046511104, # 2**42
		8796093022208, # 2**43
		17592186044416, # 2**44
		35184372088832, # 2**45
		70368744177664, # 2**46
		140737488355328, # 2**47
		281474976710656, # 2**48
		562949953421312, # 2**49
		1125899906842624, # 2**50
		2251799813685248, # 2**51
		4503599627370496, # 2**52
		"9007199254740992", # 2**53
		"18014398509481984", # 2**54
		"36028797018963968", # 2**55
		"72057594037927936", # 2**56
		"144115188075855872", # 2**57
		"288230376151711744", # 2**58
		"576460752303423488", # 2**59
		"1152921504606846976", # 2**60
		"2305843009213693952", # 2**61
		"4611686018427387904", # 2**62
		"9223372036854775808", # 2**63
		"18446744073709551616", # 2**64
	],

	# "Unsafe" convertion of an integer to a hex
	local i2h(num) = 
		local tmp = int.toHexStr('?', 0, '?', num);
		assert std.length(tmp.errors) == 0: "Cannot convert int to hex: "+std.toString(tmp.errors);
		tmp.result,
	
	# "Unsafe" convertion of a hex to an integer
	local h2i(num) =
		local tmp = int.safeParseHex('?', 0, '?', num);
		assert std.length(tmp.errors) == 0: "Cannot convert hex to int: "+std.toString(tmp.errors);
		tmp.result,

	# Turns the hex num into a valid "unsigned int 64" similar to how it's would work in C.
	local clampHex(num) =
		# 64 bit uint needs max 16 hex digits + 0x, so max 18 chars
		local l = std.length(num);
		if l <= 18 then num else '0x'+std.substr(num, l-16, 16),

	# Turns the integer num into a valid "unsigned int 64" similar to how it's would work in C.
	local clampUInt64(num) =
		if int.isUInt64(num) then num else h2i(clampHex(i2h(num))),
	
	# Returns 2 ** n. Checks n is a number between 0 and 63.
	local twoPowN(n) =
		assert (std.type(n) == 'number'): "n is not a number!";
		assert ((0 <= n) && (n < 64)): "n must be in range [0,63]";
		int.TWO_POWER_N[n],

	# "Left Shift" an integer num by n. Returns null if outside valid unsigned range.
	local leftShiftUInt(num,n) =
		clampUInt64(int.mult(clampUInt64(num), twoPowN(n))),

	# "Left Shift" an hexadecimal num by n. Returns null if outside valid unsigned range.
	local leftShiftHex(num,n) =
		clampHex(i2h(int.mult(h2i(clampHex(num)), twoPowN(n)))),

	# "Left Shift" an integer or hexadecimal num by n. Returns null if outside valid unsigned range.
	leftShift(num,n)::
		utl.force(if int.isUInt64(num) || int.isInt64(num) then
			leftShiftUInt(num,n)
		else if int.isHexStr(num) then
			leftShiftHex(num,n)
		else
			null),


	# All functions in the library, with their parameter names
	FUNCS:: {
		isBooleanStr: ['str'],
		isUIntegerStr: ['str'],
		isIntegerStr: ['str'],
		isInteger: ['num'],
		isNumberStr: ['str'],
		safeParseBoolean: ['source', 'index', 'field', 'str'],
		isHexStr: ['str'],
		isNotHugeInt: ['num'],
		safeParseInteger: ['source', 'index', 'field', 'str'],
		safeParseHex: ['source', 'index', 'field', 'str'],
		safeParseNumber: ['source', 'index', 'field', 'str'],
		toHexStr: ['source', 'index', 'field', 'intnum'],
		sign: ['num'],
		cmp: ['a','b'],
		lt: ['a','b'],
		le: ['a','b'],
		gt: ['a','b'],
		ge: ['a','b'],
		eq: ['a','b'],
		ne: ['a','b'],
		min: ['a','b'],
		max: ['a','b'],
		splitSign: ['num'],
		toNumber: ['num'],
		isInt64: ['num'],
		isUInt64: ['num'],
		neg: ['num'],
		abs: ['num'],
		add: ['a','b'],
		sub: ['a','b'],
		mult: ['a','b'],
		divmod: ['a','b'],
		leftShift: ['num','n'],
	},
}