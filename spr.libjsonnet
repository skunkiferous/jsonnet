/*
Copyright 2023 Sebastien Diot. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

# jsonnet library "spr" (Safe Parser) primary function is to split text files in lines, and import them as TSV.
# It has some additional helper functions like safeParseJSON() to enable the primary function.

local int = import 'int.libjsonnet';
local log = int.IMPORTS.log;
local utl = int.IMPORTS.utl;

# field name separator (i.e. "a.b")
local SEP = ".";

# field type separator (i.e. "a.b:int")
local TYPE_SEP = ":";

# Separator for enum labels in TSV type definition
local ENUM_SEP = '|';

# Valid operator characters
local OPERATORS = {
	"!": "ExclamationMark",
	"%": "PercentSign",
	"&": "Ampersand",
	"*": "Asterisk",
	"+": "PlusSign",
	"-": "MinusSign",
	"/": "Slash",
	"<": "LessThanSign",
	"=": "EqualsSign",
	">": "GreaterThanSign",
	"?": "QuestionMark",
	"^": "Caret",
	"|": "VerticalLine",
	"~": "Tilde",
	"$": "DollarSign",
	"#": "NumberSign",
	";": "SemiColon",
	"@": "AtSign",
	"Â°": "Degree",
	"\\": "Backslash",
};
local OPER_CHARS = std.join("", std.objectFields(OPERATORS));
# Valid identifer characters
local ID_START = "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"+OPER_CHARS;
local INT_CHARS = "0123456789";
local ID_PART =  ID_START+INT_CHARS;

# Fatal error marker
local FATAL = "FATAL: ";


# Boolean type
local BOOL = "boolean";

# String type
local STR = "string";

# JSON type
local JSON = "json";

# Number type
local NUM = "number";

# Integer type
local INT = "int";

# Hexadecimal type
local HEX = "hex";

# Identifier type
local ID = "identifier";

# Name type
local NAME = "name";

# All supported field types
local TYPES = std.set( [BOOL, STR, JSON, NUM, INT, HEX, ID, NAME] );

# All characters that *should* be escaped.
local ESCAPABLE = "nrt'\"\\";

# blank lines, and lines starting with "#", are returned as empty arrays.
# Otherwise, line is split using the TAB character
local trimBlankAndCommentAndSplit(line) =
	local tmp = std.stripChars(line, "\t");
	local isComment = std.startsWith(tmp,'#');
	local isBlankOrEmpty = (std.length(tmp) == 0); # " " is not considered "blank"
	if (isComment || isBlankOrEmpty) then [] else std.split(line, '\t');

# Returns the string that follows the prefix (and separator) in "str"
local dropPrefix(str, prefixWithoutSep) =
	assert std.startsWith(str, prefixWithoutSep+SEP);
	local lp = std.length(prefixWithoutSep);
	# "+1" to skip separator too
	std.substr(str, lp+1, std.length(str)-lp);

# Returns true if the identifier part starting after prefix is an uint.
local uintAfterPrefix(prefix, field) =
	int.isUIntegerStr(std.split(dropPrefix(prefix, field), SEP)[0]);

# Returns true, if the fields starting with field+SEP are used as array indexes
local fieldIsArray(fieldNames, field) =
	if std.length(field) == 0 then
		false
	else
		local prefixSep = field + SEP;
		local f(x) = std.startsWith(x, prefixSep) && uintAfterPrefix(x, field);
		utl.matchAny(f,fieldNames);

# Returns true, if the fields starting with field+SEP are used as sub-object fields
local fieldIsObj(fieldNames, field) =
	if std.length(field) == 0 then
		false
	else
		local prefixSep = field + SEP;
		local f(x) = std.startsWith(x, prefixSep) && !uintAfterPrefix(x, field);
		utl.matchAny(f,fieldNames);

# Finds and returns all field "prefixes"
local findFieldsPrefixes(fieldNames,depth) =
	local d1 = depth+1;
	local m(n) =
		local arr = std.split(n,SEP);
		if (std.length(arr) > d1) then std.join(SEP, arr[0:d1]) else '';
	std.set(std.map(m, fieldNames));

# Split a string in 2. Second part is defSecond if the separator was not found.
local split(str, sep, defSecond) =
	local idx = std.findSubstr(sep, str);
	if std.length(idx) == 0 then
		[ str, defSecond ]
	else
		[ std.substr(str, 0, idx[0]), std.substr(str, idx[0]+1, std.length(str)-idx[0]-1) ];

# Split the name and type of a field
local splitNameAndType(str) =
	split(str, TYPE_SEP, STR);

# Returns a function that takes an array of values, and computes the value of that field as an object.
local genObjectBuilder(gfb,fieldNames,ids,field,matchingIdx) =
	local matchingNames = std.map(function(i) fieldNames[i], matchingIdx);
	local suffix(name) = std.split(dropPrefix(name, field), SEP)[0];
	local suffixes = std.set(std.map(suffix,matchingNames));
	local suffixesCount = std.length(suffixes);
	local suffixIdx = std.range(0,suffixesCount-1);
	local gen(suffixIdx) =
		local subField = field+SEP+suffixes[suffixIdx];
		gfb(fieldNames,ids,subField);
	local suffixFuncs = std.map(gen, suffixIdx);
	local objBuilder(values) =
		local vals = std.map(function(i) suffixFuncs[i](values), suffixIdx);
		local obj = utl.makeObject(suffixes, vals, false);
		if obj == {} then null else obj;
	objBuilder;

# Returns a function that takes an array of values, and computes the value of that field as an array.
local genArrayBuilder(gfb,fieldNames,ids,field,matchingIdx) =
	local objBuilder = genObjectBuilder(gfb,fieldNames,ids,field,matchingIdx);
	local arrayBuilder(values) =
		utl.object2Array(objBuilder(values));
	arrayBuilder;

# Takes an array of all feild names, and a range over that array (ids) and a field name,
# And retruns a *function* that takes an array of "values" and compute the value of the field.
local genFieldBuilder(fieldNames,ids,field) =
	local indexes = std.find(field,fieldNames);
	local nIdx = std.length(indexes);
	# Should never be more than one match!
	assert nIdx == 0 || nIdx == 1: "Field "+field+" multi in "+std.toString(fieldNames);
	# Is field a "full/exact field"?"
	if nIdx == 1 then
		local idx = indexes[0];
		# Return unmodified value
		function(values)
			local v = values[idx];
			if v == '' then null else v
	else
		# Field is composite, and must be "computed"
		local fieldSep = field+SEP;
		local matchingIdx = [ i for i in ids if std.startsWith(fieldNames[i], fieldSep) ];
		assert std.length(matchingIdx) > 0: "Prefix "+field+" not in "+std.toString(fieldNames);
		local isArray = uintAfterPrefix(fieldNames[matchingIdx[0]],field);
		local me = genFieldBuilder;
		if isArray then
			genArrayBuilder(me,fieldNames,ids,field,matchingIdx)
		else
			genObjectBuilder(me,fieldNames,ids,field,matchingIdx);

# Returns an object, where each field is a name in fieldNames, and the value is a *function*
# which takes a "values" array, and compute the value of that field.
# Note: Only "first level" fields are in the object.
local genBuilder(fieldNames) =
	local splitted = std.map(function(n) std.split(n, SEP), fieldNames);
	local firstLevel = std.set(std.map(function(sfn) sfn[0], splitted));
	local namesCount = std.length(fieldNames);
	local ids = std.range(0, namesCount-1);
	local concat(a,b) = a + b;
	local gen(f) = { [f]: genFieldBuilder(fieldNames, ids, f) };
	std.foldl(concat, std.map(gen,firstLevel), {});

{
	local spr = self,
	
	# Library description
	DESCIPTION:: "jsonnet library 'spr' (Safe Parser) primary function is to split text files in lines,"
		+" and import them as TSV.\nIt has some additional helper functions like safeParseJSON() to "
		+"enable the primary function.",
	
	# All the imported libraries
	IMPORTS:: { log: log, utl: utl, int: int },

	# Split a string representing a whole file into a array of lines, removing any EOL characters
	str2Lines(text)::
		# We don't care what line endig is used, and we drop it.
		local lines = std.split(std.strReplace(std.strReplace(text, '\r\n', '\n'), '\r', '\n'), '\n');
		local n = std.length(lines);
		if std.length(lines[n-1]) == 0 then
			lines[:n-1]
		else
			lines,

	# Split a string representing a whole file into a array of "valid" lines, removing any EOL characters,
	# empty/comment lines, and spliting the rest of the lines using the TAB character
	str2TSV(text)::
		# Just split each line on \t, and clear blank/comment lines
		std.map(trimBlankAndCommentAndSplit, spr.str2Lines(text)),

	# Returns true, if "str" is JSON
	# WARNING: Validation is currently NOT implemented! It would require support for regex, which
	# isn't currently in jsonnet
	isJSONStr(str)::
		assert std.assertEqual(std.type(str), "string");
		if std.length(str) == 0 then
			false
		else
			# TODO I need regex to valid JSON
			true,

	# *Safely* parse a JSON value. Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value.
	safeParseJSON(source, index, field, str)::
		# TODO This will CRASH if it's not valid JSON!
		if spr.isJSONStr(str) then
			{ result: std.parseJson(str), errors: [] }
		else
			{ result: null, errors: [ log.badVal(source, index, field, 'JSON', str) ] },

	# *Safely* parse a string. Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value.
	safeParseString(source, index, field, str)::
		# The work to parse the escape is similar to the work to validate the escapes
		local ESC = "\\";
		local len = std.length(str);
		local map(i) =
			local c = str[i];
			if i == 0 then
				if c == ESC then
					['','',true]
				else
					[c,'',false]
			else
				local prev = map(i-1);
				if prev[2] then
					local expected = (std.length(std.findSubstr(c, ESCAPABLE)) > 0);
					local unexpected =
						if !expected && (std.length(std.findSubstr(c, prev[1])) == 0) then
							prev[1]+c
						else
							prev[1];
					local d = if c=='n' then '\n' else if c=='r' then '\r' else if c=='t' then '\t' else c;
					[prev[0]+d,unexpected,false]
				else
					if c == ESC then
						[prev[0],prev[1],true]
					else
						[prev[0]+c,prev[1],false];
		local mapped = map(len-1);
		local result = if mapped[2] then
			# str cannot end with the escape character!
			local msg = log.badVal(source, index, field, STR, str, ": Cannot end with a single \\");
			{ result: null, errors: [ msg ] }
		else if std.length(mapped[1]) > 0 then
			local msg = log.warnVal(source, index, field, STR, str,": Do not escape "+mapped[1]);
			{ result: ':'+mapped[0], errors: [ msg ] }
		else
			{ result: ':'+mapped[0], errors: [] };
		utl.force(result),

	# Convert value to the desired type, if possible
	safeParse(source, index, field, type, str, customTypes = null)::
		assert std.assertEqual(std.type(type), "string");
		local ctType = std.type(customTypes);
		assert (ctType == 'null' || ctType == 'object'): "customTypes must be object";
		if type == BOOL then
			int.safeParseBoolean(source, index, field, str)
		else if type == NUM then
			int.safeParseNumber(source, index, field, str)
		else if type == INT then
			int.safeParseInteger(source, index, field, str)
		else if type == HEX then
			int.safeParseHex(source, index, field, str)
		else if type == JSON then
			spr.safeParseJSON(source, index, field, str)
		else if type == STR then
			spr.safeParseString(source, index, field, str)
		else if type == ID then
			spr.safeParseIdentifier(source, index, field, str)
		else if type == NAME then
			spr.safeParseName(source, index, field, str)
		else
			local ct = if customTypes == null then null else std.get(customTypes, type);
			if ct == null then
				{ result: null, errors:
					[ log.badVal(source, index, field, type+'(unknown type)', str) ] }
			else if spr.isEnumType(ct) then
				spr.safeParseEnum(source, index, field, ct, str)
			else
				{ result: null, errors:
					[ log.badVal(source, index, field, type+'(unknown custom type)', str) ] },

	# Builds "custom types" from the type definitions
	local buildCustomTypes(source, fieldTypes) =
		local spl(s) = split(s, TYPE_SEP, null);
		local splitted = std.map(spl, fieldTypes);
		local fieldTypesNames = std.map(function(x) x[0], splitted);
		local build(x) =
			local n = x[0];
			local xtra = x[1];
			if xtra == null then
				null
			else
				local labels = std.split(xtra, ENUM_SEP);
				if std.length(labels) > 1 then
					# Assume it's an enum
					[ n, spr.buildEnum(source, n, labels) ]
				else
					null;
		local built = std.filter(function(x) x!=null, std.map(build, splitted));
		local cts = utl.sum(std.map(function(nt) { [nt[0]]: nt[1].result }, built),{});
		local errors = std.flatMap(function(nt) nt[1].errors, built);
		utl.force({ result: [fieldTypesNames, cts], errors: errors }),

	# Convert the line strings to values, as needed.
	local tsvLine2TypedTSVLine(source, index, fieldNames, fieldTypes, customTypes, values) =
		local namesCount = std.length(fieldNames);
		local valuesCount = std.length(values);
		local min = std.min(namesCount, valuesCount);
		local ids = std.range(0, min-1);
		local mapper(i) =
			local v = values[i];
			if (std.length(v) > 0) && (fieldTypes[i] != STR) then
				spr.safeParse(source, index, fieldNames[i], fieldTypes[i], v, customTypes)
			else
				{ result: v, errors: [] };
		utl.force(log.mergeOnlyErrors([mapper(i) for i in ids])),

	# Takes the output of str2TSV(text), and convert the strings to values, as needed.
	# If strtsv is actually a string, str2TSV(strtsv) is called on it first.
	tsv2TypedTSV(source, strtsv)::
		local tsv2 = if std.type(strtsv) == "string" then spr.str2TSV(strtsv) else strtsv;
		local fieldNamesAndTypes = std.map(splitNameAndType, tsv2[0]);
		local fieldNames = std.map(function(nt) nt[0], fieldNamesAndTypes);
		local fieldTypes = buildCustomTypes(source, std.map(function(nt) nt[1], fieldNamesAndTypes));
		local errors = fieldTypes.errors;
		local fieldTypesNames = fieldTypes.result[0];
		local customTypes = fieldTypes.result[1];
		local mapper(i) =
			tsvLine2TypedTSVLine(source, i, fieldNames, fieldTypesNames, customTypes, tsv2[i]);
		log.mergeOnlyErrors([{"errors": errors, "result": tsv2[0]}] +
			std.map(mapper, std.range(1, std.length(tsv2)-1))),

	# Returns true, if "str" is a valid identifier ([a-zA-Z]+[a-zA-Z0-9]*)
	isIdentifier(str)::
		assert std.assertEqual(std.type(str), "string");
		local len = std.length(str);
		local tmp = std.lstripChars(str, ID_START);
		(len > 0 && (len > std.length(tmp)) && std.length(std.lstripChars(tmp, ID_PART)) == 0),

	# Convert the operator characters in an identifier into the textual description.
	translateOperators(str)::
		local repl(op,s) = std.strReplace(s, op, OPERATORS[op]);
		utl.force(std.foldr(repl, std.objectFields(OPERATORS), str)),

	# *Safely* parse an identifier. Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value.
	safeParseIdentifier(source, index, field, str)::
		if spr.isIdentifier(str) then
			{ result: spr.translateOperators(str), errors: [] }
		else
			{ result: null, errors: [ log.badVal(source, index, field, ID, str) ] },

	# Returns true, if "str" is a valid name (identifier path) (ID | ID.ID | ID.N)
	isName(str)::
		local parts = std.split(str, SEP);
		local len = std.length(parts);
		if (len == 0) || !spr.isIdentifier(parts[0]) then
			false
		else
			local ok(i) = (spr.isIdentifier(i) || int.isUIntegerStr(i));
			(len == std.length(std.filter(ok, parts[1:])) + 1),

	# *Safely* parse a name. Returns an object like { result: VALUE, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value.
	safeParseName(source, index, field, str)::
		if spr.isName(str) then
			{ result: spr.translateOperators(str), errors: [] }
		else
			{ result: null, errors: [ log.badVal(source, index, field, NAME, str) ] },
	
	# Validates the header row (field definitions) of the TSV file. Returns a array of errors.
	local checkTSVFieldNames(source, tsv) =
		if std.type(tsv) != "array" then
			[ FATAL+source + " 'tsv' should be an array of array of strings (#1)" ]
		else if std.length(tsv) == 0 then
			[ FATAL+source + " is empty" ]
		else
			local fieldNamesAndTypes = tsv[0];
			if std.type(fieldNamesAndTypes) != "array" then
				[ FATAL+source + " 'tsv' should be an array of array of strings (#2)" ]
			else if std.length(fieldNamesAndTypes) == 0 then
				[ FATAL+source + " has no field name defined in header row" ]
			else
				local nonEmpty = std.filter(function(f) std.length(f) > 0,
					std.prune(fieldNamesAndTypes));
				if std.length(fieldNamesAndTypes) != std.length(nonEmpty) then
					[ FATAL+source + " has empty field name(s) defined in header row" ]
				else
					#local multiType = std.filter(function(f) std.length(std.findSubstr(TYPE_SEP, f))
					#	> 1, fieldNamesAndTypes);
					#if std.length(multiType) > 0 then
					#	[ FATAL+source + " has field name(s) that are multiple type separators "
					#		+ std.toString(multiType) ]
					#else
					local fieldNamesAndTypes2 = std.map(splitNameAndType, fieldNamesAndTypes);
					local fieldNames = std.map(function(nt) nt[0], fieldNamesAndTypes2);
					local fieldTypesX = buildCustomTypes(source,
						std.map(function(nt) nt[1], fieldNamesAndTypes2));
					local errors = fieldTypesX.errors;
					if std.length(errors) > 0 then
						errors
					else
						local fieldTypes = fieldTypesX.result[0];
						local customTypes = fieldTypesX.result[1];
						local knownTypes = std.set(TYPES + std.objectFields(customTypes));
						local badTypes = std.filter(function(t) !std.setMember(t, knownTypes), fieldTypes);
						if std.length(badTypes) > 0 then
							[ FATAL+source + " has field(s) that use unsupported types "
								+ std.toString(badTypes) ]
						else
							local badIds = std.filter(function(f) !spr.isName(f), fieldNames);
							if std.length(badIds) > 0 then
								[ FATAL+source + " has field name(s) that are not valid identifiers "
									+ std.toString(badIds) ]
							else
								local prefixes = findFieldsPrefixes(fieldNames, 0);
								local objPrefixes = std.filter(function(p) fieldIsObj(fieldNames, p),
									prefixes);
								local arrayPrefixes = std.filter(function(p) fieldIsArray(fieldNames,
									p), prefixes);
								local both = std.setInter(objPrefixes, arrayPrefixes);
								if std.length(both) != 0 then
									[ FATAL+source
										+ " has field name(s) that are both objects and arrays "
										+ std.toString(both) ]
								else
									[],

	# Process the content of a "TSV file", returning an object mapping the file name to it's "result"
	# and the processing "errors"
	local tsv2Obj2(source, tsv3) =
		local headerErrors = checkTSVFieldNames(source, tsv3);
		if std.length(headerErrors) > 0 then
			# Content is not processed, if headers have errors!
			{ [source] : { result: null, errors: headerErrors } }
		else
			local fieldNamesAndTypes = std.map(splitNameAndType, tsv3[0]);
			local fieldNames = std.map(function(nt) nt[0], fieldNamesAndTypes);
			# We assume the values were already converted, so we don't care about fieldTypes.
			local lines = tsv3[1:];
			local builders = genBuilder(fieldNames);
			local firstLevel = std.objectFields(builders);
			local mapper(i) =
				local values = lines[i];
				local isEmpty = (std.length(values) == 0);
				# nulls will be removed later
				if isEmpty then
					null
				else
					local vals = std.map(function(f) builders[f](values), firstLevel);
					{ result: utl.makeObject(firstLevel,vals,false), errors: [] };
			local mapped = std.map(mapper, std.range(0, std.length(lines)-1));
			local filtered = std.filter(function(o) o != null, mapped);
			{ [source] : log.mergeOnlyErrors(filtered)} ,

	# Process the content of a "TSV file", returning an object mapping the file name to it's "result"
	# and the processing "errors". If tsv is actually a string, tsv2TypedTSV(source,tsv) is called on
	# it first. Otherwise, this function assumes the strings have *already* been converted to the
	# appropriate type, where nescesary.
	tsv2Obj(source, tsv)::
		local tsv2 = if std.type(tsv) == "string" then
			spr.tsv2TypedTSV(source, tsv)
		else
			{"errors": [], "result": tsv };
		if log.hasErrors(tsv2) then
			tsv2
		else
			tsv2Obj2(source, tsv2.result),
	
	# Builds an "enum type" based on an array of strings (enum labels).
	# All labels must be valid identifiers, or empty string or null.
	# Empty strings or null are treated the same. Labels are treated as case-insensitive.
	# The ordinal of the enum labels (identifiers), are based on the position in the array.
	# The same identifer cannot occure multiple times in the array.
	buildEnum(source, typeName, labels)::
		local er = FATAL+source + " enum "+typeName+" ";
		if std.type(labels) != "array" then
			{ result: null, errors: [er + "labels is not an array: " + std.type(labels)] }
		else
			local mapped = std.map(function(x) if x == null then '' else x, labels);
			local bad(x) = (x != '') && ((std.type(x) != "string") || !spr.isIdentifier(x));
			local badLabels = std.filter(bad, mapped);
			if std.length(badLabels) > 0 then
				{ result: null, errors: [er + "has bad label(s): " + std.toString(badLabels)] }
			else
				local upper = std.map(std.asciiUpper, mapped);
				local multi(x) = (if (x == '') then 0 else std.count(upper, x)) > 1;
				local multiLabels = std.filter(multi, upper);
				if std.length(multiLabels) > 0 then
					{ result: null, errors: [er + "has label(s) defined multiple times: " +
						std.toString(multiLabels)] }
				else
					local idxLabel(idx,label) = if label == '' then null else { [label]: idx };
					# obj maps label to id
					local obj = utl.sum(std.prune(std.mapWithIndex(idxLabel, upper)), {});
					if std.length(obj) < 2 then
						{ result: null, errors: [er + "needs more than one label!"] }
					else
						{ result: { id2Label: upper, label2Id: obj }, errors: [] },
	
	# Builds an "enum type" based on an array of TWO strings (enum labels).
	# All labels must be valid identifiers. Labels are treated as case-insensitive.
	# "First" label (index 0) will be mapped to 'false', and "second" label will be 'true'.
	buildBoolEnum(source, typeName, labels)::
		local check = spr.buildEnum(source, typeName, labels);
		if check.result == null then
			check
		else
			local label2Id = check.result.label2Id;
			local id2Label = check.result.id2Label;
			local er = FATAL+source + " 'bool' enum "+typeName+" ";
			if std.length(label2Id) != 2 then
				{ result: null, errors: [er + "needs TWO labels!"] }
			else
				if std.length(id2Label) != 2 then
					{ result: null, errors: [er + "labels must be at [0,1]!"] }
				else
					{ result: { id2Label: id2Label }, errors: [] },

	# Returns true if x is an enum type.
	isEnumType(enumType)::
		if std.type(enumType) == 'object' then
			local label2Id = std.get(enumType, 'label2Id');
			local id2Label = std.get(enumType, 'id2Label');
			(std.type(id2Label) == 'array') && ((std.type(label2Id) == 'object') ||
				(label2Id == null && std.length(id2Label) == 2))
		else
			false,
	
	# Maps an enum label to it's id, or null if not found.
	labelToId(enumType,enumLabel)::
		assert spr.isEnumType(enumType);
		if std.type(enumLabel) == 'string' then
			local isBoolEnum = (std.get(enumType, 'label2Id') == null);
			local upper = std.asciiUpper(enumLabel);
			if isBoolEnum then
				if enumType.id2Label[0] == upper then
					false
				else if enumType.id2Label[1] == upper then
					true
				else
					null
			else
				std.get(enumType.label2Id, upper)
		else
			null,

	# Maps an enum id to it's label, or null if not found.
	idToLabel(enumType,enumId)::
		assert spr.isEnumType(enumType);
		local isBoolEnum = (std.get(enumType, 'label2Id') == null);
		if isBoolEnum then
			if (enumId == false) || (enumId == 'false') then
				enumType.id2Label[0]
			else if (enumId == true) || (enumId == 'true') then
				enumType.id2Label[1]
			else
				null
		else if (std.type(enumId) == 'number') || int.isNumberStr(enumId) then
			local num = int.toNumber(enumId);
			if (num >= 0) && (std.length(enumType.id2Label) > num) then
				local label = enumType.id2Label[num];
				if label == '' then null else label
			else
				null
		else
			null,

	# *Safely* parse an enum value (label|id). Returns an object like { result: id, errors: [] }
	# "result" is null and errors contains error message(s) if str is not a valid value.
	safeParseEnum(source, index, field, enumType, str)::
		local maybeId = spr.labelToId(enumType, str);
		if maybeId != null then
			{ result: maybeId, errors: [] }
		else
			local maybeLabel = spr.idToLabel(enumType, str);
			if maybeLabel != null then
				local id = spr.labelToId(enumType, maybeLabel);
				assert id != null;
				{ result: id, errors: [] }
			else
				{ result: null, errors: [ log.badVal(source, index, field, 'enum', str) ] },
	
	# All functions in the library, with their parameter names
	FUNCS:: {
		str2Lines: ['text'],
		str2TSV: ['text'],
		isJSONStr: ['str'],
		safeParseJSON: ['source', 'index', 'field', 'str'],
		safeParseString: ['source', 'index', 'field', 'str'],
		safeParseIdentifier: ['source', 'index', 'field', 'str'],
		safeParseName: ['source', 'index', 'field', 'str'],
		safeParse: ['source', 'index', 'field', 'type', 'str'],
		tsv2TypedTSV: ['source', 'tsv'],
		isIdentifier: ['str'],
		isName: ['str'],
		tsv2Obj: ['source', 'tsv'],
		buildEnum: ['source', 'arr'],
		buildBoolEnum: ['source', 'labels'],
		isEnumType: ['enumType'],
		labelToId: ['enumType', 'enumLabel'],
		idToLabel: ['enumType', 'enumId'],
		safeParseEnum: ['source', 'index', 'field', 'enumType', 'str'],
		translateOperators: ['str'],
	},
}
